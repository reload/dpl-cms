<?php
/**
 * Booking
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FBS Adapter
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\FBS\Model;

use \ArrayAccess;
use \DanskernesDigitaleBibliotek\FBS\ObjectSerializer;

/**
 * Booking Class Doc Comment
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Booking implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Booking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'automatic_forward_loan' => 'bool',
        'booking_id' => 'string',
        'deliver_branch_id' => 'string',
        'minimum_materials' => 'int',
        'note' => 'string',
        'patron_group_id' => 'int',
        'period' => '\DanskernesDigitaleBibliotek\FBS\Model\Period',
        'preferred_materials' => 'int',
        'record_id' => 'string',
        'requested_from_branch_id' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'automatic_forward_loan' => null,
        'booking_id' => null,
        'deliver_branch_id' => null,
        'minimum_materials' => 'int32',
        'note' => null,
        'patron_group_id' => 'int64',
        'period' => null,
        'preferred_materials' => 'int32',
        'record_id' => null,
        'requested_from_branch_id' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'automatic_forward_loan' => 'automaticForwardLoan',
        'booking_id' => 'bookingId',
        'deliver_branch_id' => 'deliverBranchId',
        'minimum_materials' => 'minimumMaterials',
        'note' => 'note',
        'patron_group_id' => 'patronGroupId',
        'period' => 'period',
        'preferred_materials' => 'preferredMaterials',
        'record_id' => 'recordId',
        'requested_from_branch_id' => 'requestedFromBranchId',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'automatic_forward_loan' => 'setAutomaticForwardLoan',
        'booking_id' => 'setBookingId',
        'deliver_branch_id' => 'setDeliverBranchId',
        'minimum_materials' => 'setMinimumMaterials',
        'note' => 'setNote',
        'patron_group_id' => 'setPatronGroupId',
        'period' => 'setPeriod',
        'preferred_materials' => 'setPreferredMaterials',
        'record_id' => 'setRecordId',
        'requested_from_branch_id' => 'setRequestedFromBranchId',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'automatic_forward_loan' => 'getAutomaticForwardLoan',
        'booking_id' => 'getBookingId',
        'deliver_branch_id' => 'getDeliverBranchId',
        'minimum_materials' => 'getMinimumMaterials',
        'note' => 'getNote',
        'patron_group_id' => 'getPatronGroupId',
        'period' => 'getPeriod',
        'preferred_materials' => 'getPreferredMaterials',
        'record_id' => 'getRecordId',
        'requested_from_branch_id' => 'getRequestedFromBranchId',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['automatic_forward_loan'] = $data['automatic_forward_loan'] ?? null;
        $this->container['booking_id'] = $data['booking_id'] ?? null;
        $this->container['deliver_branch_id'] = $data['deliver_branch_id'] ?? null;
        $this->container['minimum_materials'] = $data['minimum_materials'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['patron_group_id'] = $data['patron_group_id'] ?? null;
        $this->container['period'] = $data['period'] ?? null;
        $this->container['preferred_materials'] = $data['preferred_materials'] ?? null;
        $this->container['record_id'] = $data['record_id'] ?? null;
        $this->container['requested_from_branch_id'] = $data['requested_from_branch_id'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['automatic_forward_loan'] === null) {
            $invalidProperties[] = "'automatic_forward_loan' can't be null";
        }
        if ($this->container['booking_id'] === null) {
            $invalidProperties[] = "'booking_id' can't be null";
        }
        if ($this->container['deliver_branch_id'] === null) {
            $invalidProperties[] = "'deliver_branch_id' can't be null";
        }
        if ($this->container['minimum_materials'] === null) {
            $invalidProperties[] = "'minimum_materials' can't be null";
        }
        if ($this->container['patron_group_id'] === null) {
            $invalidProperties[] = "'patron_group_id' can't be null";
        }
        if ($this->container['period'] === null) {
            $invalidProperties[] = "'period' can't be null";
        }
        if ($this->container['preferred_materials'] === null) {
            $invalidProperties[] = "'preferred_materials' can't be null";
        }
        if ($this->container['record_id'] === null) {
            $invalidProperties[] = "'record_id' can't be null";
        }
        if ($this->container['requested_from_branch_id'] === null) {
            $invalidProperties[] = "'requested_from_branch_id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets automatic_forward_loan
     *
     * @return bool
     */
    public function getAutomaticForwardLoan()
    {
        return $this->container['automatic_forward_loan'];
    }

    /**
     * Sets automatic_forward_loan
     *
     * @param bool $automatic_forward_loan True if automatic forward is active for this booking
     *
     * @return self
     */
    public function setAutomaticForwardLoan($automatic_forward_loan)
    {
        $this->container['automatic_forward_loan'] = $automatic_forward_loan;

        return $this;
    }

    /**
     * Gets booking_id
     *
     * @return string
     */
    public function getBookingId()
    {
        return $this->container['booking_id'];
    }

    /**
     * Sets booking_id
     *
     * @param string $booking_id The booking identifier
     *
     * @return self
     */
    public function setBookingId($booking_id)
    {
        $this->container['booking_id'] = $booking_id;

        return $this;
    }

    /**
     * Gets deliver_branch_id
     *
     * @return string
     */
    public function getDeliverBranchId()
    {
        return $this->container['deliver_branch_id'];
    }

    /**
     * Sets deliver_branch_id
     *
     * @param string $deliver_branch_id The delivery branch identifier
     *
     * @return self
     */
    public function setDeliverBranchId($deliver_branch_id)
    {
        $this->container['deliver_branch_id'] = $deliver_branch_id;

        return $this;
    }

    /**
     * Gets minimum_materials
     *
     * @return int
     */
    public function getMinimumMaterials()
    {
        return $this->container['minimum_materials'];
    }

    /**
     * Sets minimum_materials
     *
     * @param int $minimum_materials The minimum number of materials
     *
     * @return self
     */
    public function setMinimumMaterials($minimum_materials)
    {
        $this->container['minimum_materials'] = $minimum_materials;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Additional information about this booking
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets patron_group_id
     *
     * @return int
     */
    public function getPatronGroupId()
    {
        return $this->container['patron_group_id'];
    }

    /**
     * Sets patron_group_id
     *
     * @param int $patron_group_id The patron group ID for this booking
     *
     * @return self
     */
    public function setPatronGroupId($patron_group_id)
    {
        $this->container['patron_group_id'] = $patron_group_id;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \DanskernesDigitaleBibliotek\FBS\Model\Period
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \DanskernesDigitaleBibliotek\FBS\Model\Period $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets preferred_materials
     *
     * @return int
     */
    public function getPreferredMaterials()
    {
        return $this->container['preferred_materials'];
    }

    /**
     * Sets preferred_materials
     *
     * @param int $preferred_materials The preferred number of materials
     *
     * @return self
     */
    public function setPreferredMaterials($preferred_materials)
    {
        $this->container['preferred_materials'] = $preferred_materials;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return string
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param string $record_id The record ID
     *
     * @return self
     */
    public function setRecordId($record_id)
    {
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets requested_from_branch_id
     *
     * @return string
     */
    public function getRequestedFromBranchId()
    {
        return $this->container['requested_from_branch_id'];
    }

    /**
     * Sets requested_from_branch_id
     *
     * @param string $requested_from_branch_id The branch that provides the material for booking
     *
     * @return self
     */
    public function setRequestedFromBranchId($requested_from_branch_id)
    {
        $this->container['requested_from_branch_id'] = $requested_from_branch_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The booking state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


