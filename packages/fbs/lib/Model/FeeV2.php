<?php
/**
 * FeeV2
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FBS Adapter
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\FBS\Model;

use \ArrayAccess;
use \DanskernesDigitaleBibliotek\FBS\ObjectSerializer;

/**
 * FeeV2 Class Doc Comment
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FeeV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeeV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'double',
        'creation_date' => 'string',
        'due_date' => 'string',
        'fee_id' => 'int',
        'materials' => '\DanskernesDigitaleBibliotek\FBS\Model\FeeMaterialV2[]',
        'paid_date' => 'string',
        'payable_by_client' => 'bool',
        'reason_message' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'double',
        'creation_date' => null,
        'due_date' => null,
        'fee_id' => 'int64',
        'materials' => null,
        'paid_date' => null,
        'payable_by_client' => null,
        'reason_message' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'creation_date' => 'creationDate',
        'due_date' => 'dueDate',
        'fee_id' => 'feeId',
        'materials' => 'materials',
        'paid_date' => 'paidDate',
        'payable_by_client' => 'payableByClient',
        'reason_message' => 'reasonMessage',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'creation_date' => 'setCreationDate',
        'due_date' => 'setDueDate',
        'fee_id' => 'setFeeId',
        'materials' => 'setMaterials',
        'paid_date' => 'setPaidDate',
        'payable_by_client' => 'setPayableByClient',
        'reason_message' => 'setReasonMessage',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'creation_date' => 'getCreationDate',
        'due_date' => 'getDueDate',
        'fee_id' => 'getFeeId',
        'materials' => 'getMaterials',
        'paid_date' => 'getPaidDate',
        'payable_by_client' => 'getPayableByClient',
        'reason_message' => 'getReasonMessage',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['fee_id'] = $data['fee_id'] ?? null;
        $this->container['materials'] = $data['materials'] ?? null;
        $this->container['paid_date'] = $data['paid_date'] ?? null;
        $this->container['payable_by_client'] = $data['payable_by_client'] ?? null;
        $this->container['reason_message'] = $data['reason_message'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['creation_date'] === null) {
            $invalidProperties[] = "'creation_date' can't be null";
        }
        if ($this->container['fee_id'] === null) {
            $invalidProperties[] = "'fee_id' can't be null";
        }
        if ($this->container['materials'] === null) {
            $invalidProperties[] = "'materials' can't be null";
        }
        if ($this->container['payable_by_client'] === null) {
            $invalidProperties[] = "'payable_by_client' can't be null";
        }
        if ($this->container['reason_message'] === null) {
            $invalidProperties[] = "'reason_message' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount to pay, in the currency of the agency
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date The date the fee was created
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string|null $due_date Expected payment due date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets fee_id
     *
     * @return int
     */
    public function getFeeId()
    {
        return $this->container['fee_id'];
    }

    /**
     * Sets fee_id
     *
     * @param int $fee_id Identifies the fee, used when registering a payment that covers the fee
     *
     * @return self
     */
    public function setFeeId($fee_id)
    {
        $this->container['fee_id'] = $fee_id;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return \DanskernesDigitaleBibliotek\FBS\Model\FeeMaterialV2[]
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param \DanskernesDigitaleBibliotek\FBS\Model\FeeMaterialV2[] $materials Set if fee covers materials
     *
     * @return self
     */
    public function setMaterials($materials)
    {
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return string|null
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param string|null $paid_date If the fee has been paid in full, this will be set to the date of the final payment, otherwise not set
     *
     * @return self
     */
    public function setPaidDate($paid_date)
    {
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets payable_by_client
     *
     * @return bool
     */
    public function getPayableByClient()
    {
        return $this->container['payable_by_client'];
    }

    /**
     * Sets payable_by_client
     *
     * @param bool $payable_by_client true if the client system is allowed to offer payment for the fee, false if not allowed
     *
     * @return self
     */
    public function setPayableByClient($payable_by_client)
    {
        $this->container['payable_by_client'] = $payable_by_client;

        return $this;
    }

    /**
     * Gets reason_message
     *
     * @return string
     */
    public function getReasonMessage()
    {
        return $this->container['reason_message'];
    }

    /**
     * Sets reason_message
     *
     * @param string $reason_message Human readable free text message about the reason for the fee, presentable to an end user (language is likely  to be the mother tongue of the agency)
     *
     * @return self
     */
    public function setReasonMessage($reason_message)
    {
        $this->container['reason_message'] = $reason_message;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Can be used to distinguish between different types of fees
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


