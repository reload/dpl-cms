<?php
/**
 * LoanV2
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FBS Adapter
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\FBS\Model;

use \ArrayAccess;
use \DanskernesDigitaleBibliotek\FBS\ObjectSerializer;

/**
 * LoanV2 Class Doc Comment
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LoanV2 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoanV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_longterm_loan' => 'bool',
        'is_renewable' => 'bool',
        'loan_details' => '\DanskernesDigitaleBibliotek\FBS\Model\LoanDetailsV2',
        'renewal_status_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_longterm_loan' => null,
        'is_renewable' => null,
        'loan_details' => null,
        'renewal_status_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_longterm_loan' => 'isLongtermLoan',
        'is_renewable' => 'isRenewable',
        'loan_details' => 'loanDetails',
        'renewal_status_list' => 'renewalStatusList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_longterm_loan' => 'setIsLongtermLoan',
        'is_renewable' => 'setIsRenewable',
        'loan_details' => 'setLoanDetails',
        'renewal_status_list' => 'setRenewalStatusList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_longterm_loan' => 'getIsLongtermLoan',
        'is_renewable' => 'getIsRenewable',
        'loan_details' => 'getLoanDetails',
        'renewal_status_list' => 'getRenewalStatusList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_longterm_loan'] = $data['is_longterm_loan'] ?? null;
        $this->container['is_renewable'] = $data['is_renewable'] ?? null;
        $this->container['loan_details'] = $data['loan_details'] ?? null;
        $this->container['renewal_status_list'] = $data['renewal_status_list'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_longterm_loan'] === null) {
            $invalidProperties[] = "'is_longterm_loan' can't be null";
        }
        if ($this->container['is_renewable'] === null) {
            $invalidProperties[] = "'is_renewable' can't be null";
        }
        if ($this->container['loan_details'] === null) {
            $invalidProperties[] = "'loan_details' can't be null";
        }
        if ($this->container['renewal_status_list'] === null) {
            $invalidProperties[] = "'renewal_status_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_longterm_loan
     *
     * @return bool
     */
    public function getIsLongtermLoan()
    {
        return $this->container['is_longterm_loan'];
    }

    /**
     * Sets is_longterm_loan
     *
     * @param bool $is_longterm_loan indicates whether this loan is a long term loan
     *
     * @return self
     */
    public function setIsLongtermLoan($is_longterm_loan)
    {
        $this->container['is_longterm_loan'] = $is_longterm_loan;

        return $this;
    }

    /**
     * Gets is_renewable
     *
     * @return bool
     */
    public function getIsRenewable()
    {
        return $this->container['is_renewable'];
    }

    /**
     * Sets is_renewable
     *
     * @param bool $is_renewable indicates whether this loan can be renewed
     *
     * @return self
     */
    public function setIsRenewable($is_renewable)
    {
        $this->container['is_renewable'] = $is_renewable;

        return $this;
    }

    /**
     * Gets loan_details
     *
     * @return \DanskernesDigitaleBibliotek\FBS\Model\LoanDetailsV2
     */
    public function getLoanDetails()
    {
        return $this->container['loan_details'];
    }

    /**
     * Sets loan_details
     *
     * @param \DanskernesDigitaleBibliotek\FBS\Model\LoanDetailsV2 $loan_details loan_details
     *
     * @return self
     */
    public function setLoanDetails($loan_details)
    {
        $this->container['loan_details'] = $loan_details;

        return $this;
    }

    /**
     * Gets renewal_status_list
     *
     * @return string[]
     */
    public function getRenewalStatusList()
    {
        return $this->container['renewal_status_list'];
    }

    /**
     * Sets renewal_status_list
     *
     * @param string[] $renewal_status_list if isRenewable == false then this states the reasons for denial
     *
     * @return self
     */
    public function setRenewalStatusList($renewal_status_list)
    {
        $this->container['renewal_status_list'] = $renewal_status_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


