<?php
/**
 * ILLBibliographicRecord
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FBS Adapter
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\FBS\Model;

use \ArrayAccess;
use \DanskernesDigitaleBibliotek\FBS\ObjectSerializer;

/**
 * ILLBibliographicRecord Class Doc Comment
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ILLBibliographicRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ILLBibliographicRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'author' => 'string',
        'bibliographic_category' => 'string',
        'edition' => 'string',
        'isbn' => 'string',
        'issn' => 'string',
        'language' => 'string',
        'medium_type' => 'string',
        'periodical_number' => 'string',
        'periodical_volume' => 'string',
        'place_of_publication' => 'string',
        'publication_date' => 'string',
        'publication_date_of_component' => 'string',
        'publisher' => 'string',
        'record_id' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'author' => null,
        'bibliographic_category' => null,
        'edition' => null,
        'isbn' => null,
        'issn' => null,
        'language' => null,
        'medium_type' => null,
        'periodical_number' => null,
        'periodical_volume' => null,
        'place_of_publication' => null,
        'publication_date' => null,
        'publication_date_of_component' => null,
        'publisher' => null,
        'record_id' => null,
        'title' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'author' => 'author',
        'bibliographic_category' => 'bibliographicCategory',
        'edition' => 'edition',
        'isbn' => 'isbn',
        'issn' => 'issn',
        'language' => 'language',
        'medium_type' => 'mediumType',
        'periodical_number' => 'periodicalNumber',
        'periodical_volume' => 'periodicalVolume',
        'place_of_publication' => 'placeOfPublication',
        'publication_date' => 'publicationDate',
        'publication_date_of_component' => 'publicationDateOfComponent',
        'publisher' => 'publisher',
        'record_id' => 'recordId',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'author' => 'setAuthor',
        'bibliographic_category' => 'setBibliographicCategory',
        'edition' => 'setEdition',
        'isbn' => 'setIsbn',
        'issn' => 'setIssn',
        'language' => 'setLanguage',
        'medium_type' => 'setMediumType',
        'periodical_number' => 'setPeriodicalNumber',
        'periodical_volume' => 'setPeriodicalVolume',
        'place_of_publication' => 'setPlaceOfPublication',
        'publication_date' => 'setPublicationDate',
        'publication_date_of_component' => 'setPublicationDateOfComponent',
        'publisher' => 'setPublisher',
        'record_id' => 'setRecordId',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'author' => 'getAuthor',
        'bibliographic_category' => 'getBibliographicCategory',
        'edition' => 'getEdition',
        'isbn' => 'getIsbn',
        'issn' => 'getIssn',
        'language' => 'getLanguage',
        'medium_type' => 'getMediumType',
        'periodical_number' => 'getPeriodicalNumber',
        'periodical_volume' => 'getPeriodicalVolume',
        'place_of_publication' => 'getPlaceOfPublication',
        'publication_date' => 'getPublicationDate',
        'publication_date_of_component' => 'getPublicationDateOfComponent',
        'publisher' => 'getPublisher',
        'record_id' => 'getRecordId',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['author'] = $data['author'] ?? null;
        $this->container['bibliographic_category'] = $data['bibliographic_category'] ?? null;
        $this->container['edition'] = $data['edition'] ?? null;
        $this->container['isbn'] = $data['isbn'] ?? null;
        $this->container['issn'] = $data['issn'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['medium_type'] = $data['medium_type'] ?? null;
        $this->container['periodical_number'] = $data['periodical_number'] ?? null;
        $this->container['periodical_volume'] = $data['periodical_volume'] ?? null;
        $this->container['place_of_publication'] = $data['place_of_publication'] ?? null;
        $this->container['publication_date'] = $data['publication_date'] ?? null;
        $this->container['publication_date_of_component'] = $data['publication_date_of_component'] ?? null;
        $this->container['publisher'] = $data['publisher'] ?? null;
        $this->container['record_id'] = $data['record_id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['medium_type'] === null) {
            $invalidProperties[] = "'medium_type' can't be null";
        }
        if ($this->container['record_id'] === null) {
            $invalidProperties[] = "'record_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author The author of the material
     *
     * @return self
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets bibliographic_category
     *
     * @return string|null
     */
    public function getBibliographicCategory()
    {
        return $this->container['bibliographic_category'];
    }

    /**
     * Sets bibliographic_category
     *
     * @param string|null $bibliographic_category Bibliographic category from danMARC2 008 *t
     *
     * @return self
     */
    public function setBibliographicCategory($bibliographic_category)
    {
        $this->container['bibliographic_category'] = $bibliographic_category;

        return $this;
    }

    /**
     * Gets edition
     *
     * @return string|null
     */
    public function getEdition()
    {
        return $this->container['edition'];
    }

    /**
     * Sets edition
     *
     * @param string|null $edition Edition-information from the bibliographic record
     *
     * @return self
     */
    public function setEdition($edition)
    {
        $this->container['edition'] = $edition;

        return $this;
    }

    /**
     * Gets isbn
     *
     * @return string|null
     */
    public function getIsbn()
    {
        return $this->container['isbn'];
    }

    /**
     * Sets isbn
     *
     * @param string|null $isbn ISBN-information from the bibliographic record
     *
     * @return self
     */
    public function setIsbn($isbn)
    {
        $this->container['isbn'] = $isbn;

        return $this;
    }

    /**
     * Gets issn
     *
     * @return string|null
     */
    public function getIssn()
    {
        return $this->container['issn'];
    }

    /**
     * Sets issn
     *
     * @param string|null $issn ISSN-information from the bibliographic record
     *
     * @return self
     */
    public function setIssn($issn)
    {
        $this->container['issn'] = $issn;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Language of the requested material.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets medium_type
     *
     * @return string
     */
    public function getMediumType()
    {
        return $this->container['medium_type'];
    }

    /**
     * Sets medium_type
     *
     * @param string $medium_type Type of the requested material - from danMARC2 009 *a+*g (general and specific)
     *
     * @return self
     */
    public function setMediumType($medium_type)
    {
        $this->container['medium_type'] = $medium_type;

        return $this;
    }

    /**
     * Gets periodical_number
     *
     * @return string|null
     */
    public function getPeriodicalNumber()
    {
        return $this->container['periodical_number'];
    }

    /**
     * Sets periodical_number
     *
     * @param string|null $periodical_number Issue number of a periodical
     *
     * @return self
     */
    public function setPeriodicalNumber($periodical_number)
    {
        $this->container['periodical_number'] = $periodical_number;

        return $this;
    }

    /**
     * Gets periodical_volume
     *
     * @return string|null
     */
    public function getPeriodicalVolume()
    {
        return $this->container['periodical_volume'];
    }

    /**
     * Sets periodical_volume
     *
     * @param string|null $periodical_volume Volume name of a periodical
     *
     * @return self
     */
    public function setPeriodicalVolume($periodical_volume)
    {
        $this->container['periodical_volume'] = $periodical_volume;

        return $this;
    }

    /**
     * Gets place_of_publication
     *
     * @return string|null
     */
    public function getPlaceOfPublication()
    {
        return $this->container['place_of_publication'];
    }

    /**
     * Sets place_of_publication
     *
     * @param string|null $place_of_publication place_of_publication
     *
     * @return self
     */
    public function setPlaceOfPublication($place_of_publication)
    {
        $this->container['place_of_publication'] = $place_of_publication;

        return $this;
    }

    /**
     * Gets publication_date
     *
     * @return string|null
     */
    public function getPublicationDate()
    {
        return $this->container['publication_date'];
    }

    /**
     * Sets publication_date
     *
     * @param string|null $publication_date Publication date of the requested material.
     *
     * @return self
     */
    public function setPublicationDate($publication_date)
    {
        $this->container['publication_date'] = $publication_date;

        return $this;
    }

    /**
     * Gets publication_date_of_component
     *
     * @return string|null
     */
    public function getPublicationDateOfComponent()
    {
        return $this->container['publication_date_of_component'];
    }

    /**
     * Sets publication_date_of_component
     *
     * @param string|null $publication_date_of_component Publication date of an item component, or article.
     *
     * @return self
     */
    public function setPublicationDateOfComponent($publication_date_of_component)
    {
        $this->container['publication_date_of_component'] = $publication_date_of_component;

        return $this;
    }

    /**
     * Gets publisher
     *
     * @return string|null
     */
    public function getPublisher()
    {
        return $this->container['publisher'];
    }

    /**
     * Sets publisher
     *
     * @param string|null $publisher Publisher of the requested material.
     *
     * @return self
     */
    public function setPublisher($publisher)
    {
        $this->container['publisher'] = $publisher;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return string
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param string $record_id The FAUST number
     *
     * @return self
     */
    public function setRecordId($record_id)
    {
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the material
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


