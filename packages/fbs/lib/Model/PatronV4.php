<?php
/**
 * PatronV4
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FBS Adapter
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\FBS\Model;

use \ArrayAccess;
use \DanskernesDigitaleBibliotek\FBS\ObjectSerializer;

/**
 * PatronV4 Class Doc Comment
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PatronV4 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PatronV4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => '\DanskernesDigitaleBibliotek\FBS\Model\AddressV2',
        'allow_bookings' => 'bool',
        'birthday' => 'string',
        'block_status' => '\DanskernesDigitaleBibliotek\FBS\Model\BlockStatus[]',
        'default_interest_period' => 'int',
        'email_address' => 'string',
        'name' => 'string',
        'on_hold' => '\DanskernesDigitaleBibliotek\FBS\Model\Period',
        'patron_id' => 'int',
        'phone_number' => 'string',
        'preferred_language' => 'string',
        'preferred_pickup_branch' => 'string',
        'receive_email' => 'bool',
        'receive_postal_mail' => 'bool',
        'receive_sms' => 'bool',
        'resident' => 'bool',
        'secondary_address' => '\DanskernesDigitaleBibliotek\FBS\Model\AddressV2'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'allow_bookings' => null,
        'birthday' => null,
        'block_status' => null,
        'default_interest_period' => 'int32',
        'email_address' => null,
        'name' => null,
        'on_hold' => null,
        'patron_id' => 'int64',
        'phone_number' => null,
        'preferred_language' => null,
        'preferred_pickup_branch' => null,
        'receive_email' => null,
        'receive_postal_mail' => null,
        'receive_sms' => null,
        'resident' => null,
        'secondary_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'allow_bookings' => 'allowBookings',
        'birthday' => 'birthday',
        'block_status' => 'blockStatus',
        'default_interest_period' => 'defaultInterestPeriod',
        'email_address' => 'emailAddress',
        'name' => 'name',
        'on_hold' => 'onHold',
        'patron_id' => 'patronId',
        'phone_number' => 'phoneNumber',
        'preferred_language' => 'preferredLanguage',
        'preferred_pickup_branch' => 'preferredPickupBranch',
        'receive_email' => 'receiveEmail',
        'receive_postal_mail' => 'receivePostalMail',
        'receive_sms' => 'receiveSms',
        'resident' => 'resident',
        'secondary_address' => 'secondaryAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'allow_bookings' => 'setAllowBookings',
        'birthday' => 'setBirthday',
        'block_status' => 'setBlockStatus',
        'default_interest_period' => 'setDefaultInterestPeriod',
        'email_address' => 'setEmailAddress',
        'name' => 'setName',
        'on_hold' => 'setOnHold',
        'patron_id' => 'setPatronId',
        'phone_number' => 'setPhoneNumber',
        'preferred_language' => 'setPreferredLanguage',
        'preferred_pickup_branch' => 'setPreferredPickupBranch',
        'receive_email' => 'setReceiveEmail',
        'receive_postal_mail' => 'setReceivePostalMail',
        'receive_sms' => 'setReceiveSms',
        'resident' => 'setResident',
        'secondary_address' => 'setSecondaryAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'allow_bookings' => 'getAllowBookings',
        'birthday' => 'getBirthday',
        'block_status' => 'getBlockStatus',
        'default_interest_period' => 'getDefaultInterestPeriod',
        'email_address' => 'getEmailAddress',
        'name' => 'getName',
        'on_hold' => 'getOnHold',
        'patron_id' => 'getPatronId',
        'phone_number' => 'getPhoneNumber',
        'preferred_language' => 'getPreferredLanguage',
        'preferred_pickup_branch' => 'getPreferredPickupBranch',
        'receive_email' => 'getReceiveEmail',
        'receive_postal_mail' => 'getReceivePostalMail',
        'receive_sms' => 'getReceiveSms',
        'resident' => 'getResident',
        'secondary_address' => 'getSecondaryAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = $data['address'] ?? null;
        $this->container['allow_bookings'] = $data['allow_bookings'] ?? null;
        $this->container['birthday'] = $data['birthday'] ?? null;
        $this->container['block_status'] = $data['block_status'] ?? null;
        $this->container['default_interest_period'] = $data['default_interest_period'] ?? null;
        $this->container['email_address'] = $data['email_address'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['on_hold'] = $data['on_hold'] ?? null;
        $this->container['patron_id'] = $data['patron_id'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['preferred_language'] = $data['preferred_language'] ?? null;
        $this->container['preferred_pickup_branch'] = $data['preferred_pickup_branch'] ?? null;
        $this->container['receive_email'] = $data['receive_email'] ?? null;
        $this->container['receive_postal_mail'] = $data['receive_postal_mail'] ?? null;
        $this->container['receive_sms'] = $data['receive_sms'] ?? null;
        $this->container['resident'] = $data['resident'] ?? null;
        $this->container['secondary_address'] = $data['secondary_address'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['default_interest_period'] === null) {
            $invalidProperties[] = "'default_interest_period' can't be null";
        }
        if ($this->container['patron_id'] === null) {
            $invalidProperties[] = "'patron_id' can't be null";
        }
        if ($this->container['preferred_pickup_branch'] === null) {
            $invalidProperties[] = "'preferred_pickup_branch' can't be null";
        }
        if ($this->container['receive_email'] === null) {
            $invalidProperties[] = "'receive_email' can't be null";
        }
        if ($this->container['receive_postal_mail'] === null) {
            $invalidProperties[] = "'receive_postal_mail' can't be null";
        }
        if ($this->container['receive_sms'] === null) {
            $invalidProperties[] = "'receive_sms' can't be null";
        }
        if ($this->container['resident'] === null) {
            $invalidProperties[] = "'resident' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \DanskernesDigitaleBibliotek\FBS\Model\AddressV2|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \DanskernesDigitaleBibliotek\FBS\Model\AddressV2|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets allow_bookings
     *
     * @return bool|null
     */
    public function getAllowBookings()
    {
        return $this->container['allow_bookings'];
    }

    /**
     * Sets allow_bookings
     *
     * @param bool|null $allow_bookings True if the user is allowed to create bookings.
     *
     * @return self
     */
    public function setAllowBookings($allow_bookings)
    {
        $this->container['allow_bookings'] = $allow_bookings;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets block_status
     *
     * @return \DanskernesDigitaleBibliotek\FBS\Model\BlockStatus[]|null
     */
    public function getBlockStatus()
    {
        return $this->container['block_status'];
    }

    /**
     * Sets block_status
     *
     * @param \DanskernesDigitaleBibliotek\FBS\Model\BlockStatus[]|null $block_status A list of block statuses -  if the patron is not blocked then this value is empty or null
     *
     * @return self
     */
    public function setBlockStatus($block_status)
    {
        $this->container['block_status'] = $block_status;

        return $this;
    }

    /**
     * Gets default_interest_period
     *
     * @return int
     */
    public function getDefaultInterestPeriod()
    {
        return $this->container['default_interest_period'];
    }

    /**
     * Sets default_interest_period
     *
     * @param int $default_interest_period Length of default interest period in days
     *
     * @return self
     */
    public function setDefaultInterestPeriod($default_interest_period)
    {
        $this->container['default_interest_period'] = $default_interest_period;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets on_hold
     *
     * @return \DanskernesDigitaleBibliotek\FBS\Model\Period|null
     */
    public function getOnHold()
    {
        return $this->container['on_hold'];
    }

    /**
     * Sets on_hold
     *
     * @param \DanskernesDigitaleBibliotek\FBS\Model\Period|null $on_hold on_hold
     *
     * @return self
     */
    public function setOnHold($on_hold)
    {
        $this->container['on_hold'] = $on_hold;

        return $this;
    }

    /**
     * Gets patron_id
     *
     * @return int
     */
    public function getPatronId()
    {
        return $this->container['patron_id'];
    }

    /**
     * Sets patron_id
     *
     * @param int $patron_id Patron identifier to be used in subsequent service calls involving the patron
     *
     * @return self
     */
    public function setPatronId($patron_id)
    {
        $this->container['patron_id'] = $patron_id;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets preferred_language
     *
     * @return string|null
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferred_language'];
    }

    /**
     * Sets preferred_language
     *
     * @param string|null $preferred_language Language in which the patron prefers the communication with the library to take place
     *
     * @return self
     */
    public function setPreferredLanguage($preferred_language)
    {
        $this->container['preferred_language'] = $preferred_language;

        return $this;
    }

    /**
     * Gets preferred_pickup_branch
     *
     * @return string
     */
    public function getPreferredPickupBranch()
    {
        return $this->container['preferred_pickup_branch'];
    }

    /**
     * Sets preferred_pickup_branch
     *
     * @param string $preferred_pickup_branch ISIL of preferred pickup branch
     *
     * @return self
     */
    public function setPreferredPickupBranch($preferred_pickup_branch)
    {
        $this->container['preferred_pickup_branch'] = $preferred_pickup_branch;

        return $this;
    }

    /**
     * Gets receive_email
     *
     * @return bool
     */
    public function getReceiveEmail()
    {
        return $this->container['receive_email'];
    }

    /**
     * Sets receive_email
     *
     * @param bool $receive_email receive_email
     *
     * @return self
     */
    public function setReceiveEmail($receive_email)
    {
        $this->container['receive_email'] = $receive_email;

        return $this;
    }

    /**
     * Gets receive_postal_mail
     *
     * @return bool
     */
    public function getReceivePostalMail()
    {
        return $this->container['receive_postal_mail'];
    }

    /**
     * Sets receive_postal_mail
     *
     * @param bool $receive_postal_mail receive_postal_mail
     *
     * @return self
     */
    public function setReceivePostalMail($receive_postal_mail)
    {
        $this->container['receive_postal_mail'] = $receive_postal_mail;

        return $this;
    }

    /**
     * Gets receive_sms
     *
     * @return bool
     */
    public function getReceiveSms()
    {
        return $this->container['receive_sms'];
    }

    /**
     * Sets receive_sms
     *
     * @param bool $receive_sms receive_sms
     *
     * @return self
     */
    public function setReceiveSms($receive_sms)
    {
        $this->container['receive_sms'] = $receive_sms;

        return $this;
    }

    /**
     * Gets resident
     *
     * @return bool
     */
    public function getResident()
    {
        return $this->container['resident'];
    }

    /**
     * Sets resident
     *
     * @param bool $resident True if the user is resident in the same municipality as the library
     *
     * @return self
     */
    public function setResident($resident)
    {
        $this->container['resident'] = $resident;

        return $this;
    }

    /**
     * Gets secondary_address
     *
     * @return \DanskernesDigitaleBibliotek\FBS\Model\AddressV2|null
     */
    public function getSecondaryAddress()
    {
        return $this->container['secondary_address'];
    }

    /**
     * Sets secondary_address
     *
     * @param \DanskernesDigitaleBibliotek\FBS\Model\AddressV2|null $secondary_address secondary_address
     *
     * @return self
     */
    public function setSecondaryAddress($secondary_address)
    {
        $this->container['secondary_address'] = $secondary_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


