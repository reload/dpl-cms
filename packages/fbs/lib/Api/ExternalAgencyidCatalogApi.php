<?php
/**
 * ExternalAgencyidCatalogApi
 * PHP version 7.3
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FBS Adapter
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\FBS\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DanskernesDigitaleBibliotek\FBS\ApiException;
use DanskernesDigitaleBibliotek\FBS\Configuration;
use DanskernesDigitaleBibliotek\FBS\HeaderSelector;
use DanskernesDigitaleBibliotek\FBS\ObjectSerializer;

/**
 * ExternalAgencyidCatalogApi Class Doc Comment
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExternalAgencyidCatalogApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAvailabilityV3
     *
     * Get availability of bibliographical records.
     *
     * @param  string[] $recordid list of record ids (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DanskernesDigitaleBibliotek\FBS\Model\AvailabilityV3[]
     */
    public function getAvailabilityV3($recordid, $exclude = null)
    {
        list($response) = $this->getAvailabilityV3WithHttpInfo($recordid, $exclude);
        return $response;
    }

    /**
     * Operation getAvailabilityV3WithHttpInfo
     *
     * Get availability of bibliographical records.
     *
     * @param  string[] $recordid list of record ids (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DanskernesDigitaleBibliotek\FBS\Model\AvailabilityV3[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailabilityV3WithHttpInfo($recordid, $exclude = null)
    {
        $request = $this->getAvailabilityV3Request($recordid, $exclude);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DanskernesDigitaleBibliotek\FBS\Model\AvailabilityV3[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DanskernesDigitaleBibliotek\FBS\Model\AvailabilityV3[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AvailabilityV3[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DanskernesDigitaleBibliotek\FBS\Model\AvailabilityV3[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAvailabilityV3Async
     *
     * Get availability of bibliographical records.
     *
     * @param  string[] $recordid list of record ids (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailabilityV3Async($recordid, $exclude = null)
    {
        return $this->getAvailabilityV3AsyncWithHttpInfo($recordid, $exclude)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvailabilityV3AsyncWithHttpInfo
     *
     * Get availability of bibliographical records.
     *
     * @param  string[] $recordid list of record ids (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAvailabilityV3AsyncWithHttpInfo($recordid, $exclude = null)
    {
        $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AvailabilityV3[]';
        $request = $this->getAvailabilityV3Request($recordid, $exclude);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvailabilityV3'
     *
     * @param  string[] $recordid list of record ids (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAvailabilityV3Request($recordid, $exclude = null)
    {
        // verify the required parameter 'recordid' is set
        if ($recordid === null || (is_array($recordid) && count($recordid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recordid when calling getAvailabilityV3'
            );
        }

        $resourcePath = '/external/agencyid/catalog/availability/v3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($recordid)) {
            $recordid = ObjectSerializer::serializeCollection($recordid, 'form', true);
        }
        if ($recordid !== null) {
            $queryParams['recordid'] = $recordid;
        }
        // query params
        if (is_array($exclude)) {
            $exclude = ObjectSerializer::serializeCollection($exclude, 'form', true);
        }
        if ($exclude !== null) {
            $queryParams['exclude'] = $exclude;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHoldingsV3
     *
     * Get placement holdings for bibliographical records.
     *
     * @param  string[] $recordid Identifies the bibliographical records - The FAUST number. (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DanskernesDigitaleBibliotek\FBS\Model\HoldingsForBibliographicalRecordV3[]
     */
    public function getHoldingsV3($recordid, $exclude = null)
    {
        list($response) = $this->getHoldingsV3WithHttpInfo($recordid, $exclude);
        return $response;
    }

    /**
     * Operation getHoldingsV3WithHttpInfo
     *
     * Get placement holdings for bibliographical records.
     *
     * @param  string[] $recordid Identifies the bibliographical records - The FAUST number. (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DanskernesDigitaleBibliotek\FBS\Model\HoldingsForBibliographicalRecordV3[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHoldingsV3WithHttpInfo($recordid, $exclude = null)
    {
        $request = $this->getHoldingsV3Request($recordid, $exclude);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DanskernesDigitaleBibliotek\FBS\Model\HoldingsForBibliographicalRecordV3[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DanskernesDigitaleBibliotek\FBS\Model\HoldingsForBibliographicalRecordV3[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\HoldingsForBibliographicalRecordV3[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DanskernesDigitaleBibliotek\FBS\Model\HoldingsForBibliographicalRecordV3[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHoldingsV3Async
     *
     * Get placement holdings for bibliographical records.
     *
     * @param  string[] $recordid Identifies the bibliographical records - The FAUST number. (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingsV3Async($recordid, $exclude = null)
    {
        return $this->getHoldingsV3AsyncWithHttpInfo($recordid, $exclude)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHoldingsV3AsyncWithHttpInfo
     *
     * Get placement holdings for bibliographical records.
     *
     * @param  string[] $recordid Identifies the bibliographical records - The FAUST number. (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHoldingsV3AsyncWithHttpInfo($recordid, $exclude = null)
    {
        $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\HoldingsForBibliographicalRecordV3[]';
        $request = $this->getHoldingsV3Request($recordid, $exclude);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHoldingsV3'
     *
     * @param  string[] $recordid Identifies the bibliographical records - The FAUST number. (required)
     * @param  string[] $exclude Identifies the branchIds which are excluded from the result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHoldingsV3Request($recordid, $exclude = null)
    {
        // verify the required parameter 'recordid' is set
        if ($recordid === null || (is_array($recordid) && count($recordid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recordid when calling getHoldingsV3'
            );
        }

        $resourcePath = '/external/agencyid/catalog/holdings/v3';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($recordid)) {
            $recordid = ObjectSerializer::serializeCollection($recordid, 'form', true);
        }
        if ($recordid !== null) {
            $queryParams['recordid'] = $recordid;
        }
        // query params
        if (is_array($exclude)) {
            $exclude = ObjectSerializer::serializeCollection($exclude, 'form', true);
        }
        if ($exclude !== null) {
            $queryParams['exclude'] = $exclude;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
