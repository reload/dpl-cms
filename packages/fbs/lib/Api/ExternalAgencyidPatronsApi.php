<?php
/**
 * ExternalAgencyidPatronsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FBS Adapter
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\FBS\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DanskernesDigitaleBibliotek\FBS\ApiException;
use DanskernesDigitaleBibliotek\FBS\Configuration;
use DanskernesDigitaleBibliotek\FBS\HeaderSelector;
use DanskernesDigitaleBibliotek\FBS\ObjectSerializer;

/**
 * ExternalAgencyidPatronsApi Class Doc Comment
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\FBS
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExternalAgencyidPatronsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createV4
     *
     * Create a new patron who is a person.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\CreatePatronRequestV3 $create_patron_request the patron to be created (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV4
     */
    public function createV4($create_patron_request)
    {
        list($response) = $this->createV4WithHttpInfo($create_patron_request);
        return $response;
    }

    /**
     * Operation createV4WithHttpInfo
     *
     * Create a new patron who is a person.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\CreatePatronRequestV3 $create_patron_request the patron to be created (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV4, HTTP status code, HTTP response headers (array of strings)
     */
    public function createV4WithHttpInfo($create_patron_request)
    {
        $request = $this->createV4Request($create_patron_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV4' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV4', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV4';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV4',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createV4Async
     *
     * Create a new patron who is a person.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\CreatePatronRequestV3 $create_patron_request the patron to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createV4Async($create_patron_request)
    {
        return $this->createV4AsyncWithHttpInfo($create_patron_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createV4AsyncWithHttpInfo
     *
     * Create a new patron who is a person.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\CreatePatronRequestV3 $create_patron_request the patron to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createV4AsyncWithHttpInfo($create_patron_request)
    {
        $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV4';
        $request = $this->createV4Request($create_patron_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createV4'
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\CreatePatronRequestV3 $create_patron_request the patron to be created (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createV4Request($create_patron_request)
    {
        // verify the required parameter 'create_patron_request' is set
        if ($create_patron_request === null || (is_array($create_patron_request) && count($create_patron_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_patron_request when calling createV4'
            );
        }

        $resourcePath = '/external/agencyid/patrons/v4';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($create_patron_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_patron_request));
            } else {
                $httpBody = $create_patron_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWithGuardian
     *
     * Creates a person patron with a guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\PatronWithGuardianRequest $patron_with_guardian_request The payload with information for the patron to create (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function createWithGuardian($patron_with_guardian_request)
    {
        list($response) = $this->createWithGuardianWithHttpInfo($patron_with_guardian_request);
        return $response;
    }

    /**
     * Operation createWithGuardianWithHttpInfo
     *
     * Creates a person patron with a guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\PatronWithGuardianRequest $patron_with_guardian_request The payload with information for the patron to create (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWithGuardianWithHttpInfo($patron_with_guardian_request)
    {
        $request = $this->createWithGuardianRequest($patron_with_guardian_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWithGuardianAsync
     *
     * Creates a person patron with a guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\PatronWithGuardianRequest $patron_with_guardian_request The payload with information for the patron to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWithGuardianAsync($patron_with_guardian_request)
    {
        return $this->createWithGuardianAsyncWithHttpInfo($patron_with_guardian_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWithGuardianAsyncWithHttpInfo
     *
     * Creates a person patron with a guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\PatronWithGuardianRequest $patron_with_guardian_request The payload with information for the patron to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWithGuardianAsyncWithHttpInfo($patron_with_guardian_request)
    {
        $returnType = 'int';
        $request = $this->createWithGuardianRequest($patron_with_guardian_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWithGuardian'
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\PatronWithGuardianRequest $patron_with_guardian_request The payload with information for the patron to create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWithGuardianRequest($patron_with_guardian_request)
    {
        // verify the required parameter 'patron_with_guardian_request' is set
        if ($patron_with_guardian_request === null || (is_array($patron_with_guardian_request) && count($patron_with_guardian_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patron_with_guardian_request when calling createWithGuardian'
            );
        }

        $resourcePath = '/external/agencyid/patrons/withGuardian/v1';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($patron_with_guardian_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($patron_with_guardian_request));
            } else {
                $httpBody = $patron_with_guardian_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPatronInformationByPatronIdV2
     *
     * Returns the patron details
     *
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6
     */
    public function getPatronInformationByPatronIdV2()
    {
        list($response) = $this->getPatronInformationByPatronIdV2WithHttpInfo();
        return $response;
    }

    /**
     * Operation getPatronInformationByPatronIdV2WithHttpInfo
     *
     * Returns the patron details
     *
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPatronInformationByPatronIdV2WithHttpInfo()
    {
        $request = $this->getPatronInformationByPatronIdV2Request();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPatronInformationByPatronIdV2Async
     *
     * Returns the patron details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPatronInformationByPatronIdV2Async()
    {
        return $this->getPatronInformationByPatronIdV2AsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPatronInformationByPatronIdV2AsyncWithHttpInfo
     *
     * Returns the patron details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPatronInformationByPatronIdV2AsyncWithHttpInfo()
    {
        $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6';
        $request = $this->getPatronInformationByPatronIdV2Request();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPatronInformationByPatronIdV2'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPatronInformationByPatronIdV2Request()
    {

        $resourcePath = '/external/agencyid/patrons/patronid/v2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGuardian
     *
     * Updates a person patron&#39;s guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdateGuardianRequest $update_guardian_request The payload with information for the guardian update (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function updateGuardian($update_guardian_request)
    {
        list($response) = $this->updateGuardianWithHttpInfo($update_guardian_request);
        return $response;
    }

    /**
     * Operation updateGuardianWithHttpInfo
     *
     * Updates a person patron&#39;s guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdateGuardianRequest $update_guardian_request The payload with information for the guardian update (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGuardianWithHttpInfo($update_guardian_request)
    {
        $request = $this->updateGuardianRequest($update_guardian_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGuardianAsync
     *
     * Updates a person patron&#39;s guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdateGuardianRequest $update_guardian_request The payload with information for the guardian update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGuardianAsync($update_guardian_request)
    {
        return $this->updateGuardianAsyncWithHttpInfo($update_guardian_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGuardianAsyncWithHttpInfo
     *
     * Updates a person patron&#39;s guardian (eg A financial responsible).
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdateGuardianRequest $update_guardian_request The payload with information for the guardian update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGuardianAsyncWithHttpInfo($update_guardian_request)
    {
        $returnType = 'int';
        $request = $this->updateGuardianRequest($update_guardian_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGuardian'
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdateGuardianRequest $update_guardian_request The payload with information for the guardian update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateGuardianRequest($update_guardian_request)
    {
        // verify the required parameter 'update_guardian_request' is set
        if ($update_guardian_request === null || (is_array($update_guardian_request) && count($update_guardian_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_guardian_request when calling updateGuardian'
            );
        }

        $resourcePath = '/external/agencyid/patrons/withGuardian/v1';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($update_guardian_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_guardian_request));
            } else {
                $httpBody = $update_guardian_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateV5
     *
     * Update information about the patron.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdatePatronRequestV4 $update_patron updated information about the patron (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6
     */
    public function updateV5($update_patron)
    {
        list($response) = $this->updateV5WithHttpInfo($update_patron);
        return $response;
    }

    /**
     * Operation updateV5WithHttpInfo
     *
     * Update information about the patron.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdatePatronRequestV4 $update_patron updated information about the patron (required)
     *
     * @throws \DanskernesDigitaleBibliotek\FBS\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateV5WithHttpInfo($update_patron)
    {
        $request = $this->updateV5Request($update_patron);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateV5Async
     *
     * Update information about the patron.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdatePatronRequestV4 $update_patron updated information about the patron (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateV5Async($update_patron)
    {
        return $this->updateV5AsyncWithHttpInfo($update_patron)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateV5AsyncWithHttpInfo
     *
     * Update information about the patron.
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdatePatronRequestV4 $update_patron updated information about the patron (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateV5AsyncWithHttpInfo($update_patron)
    {
        $returnType = '\DanskernesDigitaleBibliotek\FBS\Model\AuthenticatedPatronV6';
        $request = $this->updateV5Request($update_patron);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateV5'
     *
     * @param  \DanskernesDigitaleBibliotek\FBS\Model\UpdatePatronRequestV4 $update_patron updated information about the patron (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateV5Request($update_patron)
    {
        // verify the required parameter 'update_patron' is set
        if ($update_patron === null || (is_array($update_patron) && count($update_patron) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_patron when calling updateV5'
            );
        }

        $resourcePath = '/external/agencyid/patrons/patronid/v5';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($update_patron)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_patron));
            } else {
                $httpBody = $update_patron;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
